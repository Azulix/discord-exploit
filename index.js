const axios = require('axios');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');
const readlineSync = require('readline-sync');
let totalCodes = 0;

class Logger {
  static sprint(tag, content, color) {
    const ts = `[${new Date().toLocaleTimeString()}]`;
    console.log(`${ts} ${color}[${tag}]${content}${color}`);
  }

  static ask(tag, content, color) {
    const ts = `[${new Date().toLocaleTimeString()}]`;
    return readlineSync.question(`${ts} ${color}[${tag}]${content}${color}`);
  }
}

class O {
  constructor(proxy) {
    this.session = axios.create({
      headers: {
        'User-Agent': 'chrome112',
      },
    });
    this.proxy = proxy;
  }

  async p(url, data) {
    try {
      const response = await this.session.post(url, data);
      return response.data;
    } catch (error) {
      return null;
    }
  }

  async gen() {
    try {
      const response = await this.p('https://api.discord.gx.games/v1/direct-fulfillment', {
        partnerUserId: uuidv4(),
      });

      if (response && response.status_code === 429) {
        Logger.sprint("RATELIMIT", "Il semble que vous avez été rate limite, veuillez réessayer plus tard", '\x1b[93m');
        return null;
      }

      if (!response || !response.token) {
        Logger.sprint("ERROR", "Erreur lors de l'obtension du code, veuillez réessayer plus tard.", '\x1b[91m');
        return null;
      }

      const ptoken = response.token;
      const link = `https://discord.com/billing/partner-promotions/1180231712274387115/${ptoken}`;
      totalCodes++
      Logger.sprint(`CODE (- ${totalCodes} )`, link, '\x1b[92m');
      return link;
    } catch (error) {
      console.error(error);
      return null;
    }
  }
}

function gnr(proxies) {
  return new Promise(async (resolve) => {
    try {
      const proxy = `http://${proxies[Math.floor(Math.random() * proxies.length)]}`;
      const o = new O(proxy);
      const promoLink = await o.gen();
      resolve(promoLink);
    } catch (error) {
      console.error(error);
      resolve(null);
    }
  });
}

async function main() {
  while (true) {
    const proxies = fs.readFileSync('proxies.txt', 'utf-8').split('\n').filter(Boolean);
    const promises = Array.from({ length: 500 }, () => gnr(proxies));
    const promoLinks = await Promise.all(promises);

    promoLinks.forEach((link) => {
      if (link) {
        fs.appendFileSync("promos.txt", `${link}\n`);
        totalCodes++;
      }
    });

  }
}

main();
